{
    "@context":
    {
        "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
        "dc": "http://purl.org/dc/elements/1.1/",
        "schema": "http://schema.org/",
        "foaf": "http://xmlns.com/foaf/0.1/",
        "@base": "http://learningobjects.com/0.1/"
    },
    "@graph":
    [
        {
            "@id": "0321313798",
            "@type": "schema:CreativeWork",
            "dc:identifier": "0321313798",
            "dc:title": "Software engineering.",
            "dc:creator": "http://id.loc.gov/authorities/names/n99018699.html",
            "dc:relation": "International computer science series 5009",
            "dc:language": "en",
            "dc:publisher": "http://libcat.staffs.ac.uk/cgi-bin/koha/opac-search.pl?q=pb:Addison-Wesley",
            "dc:description": "SOMMERVILLE Software Engineering 8 The eighth edition of the best-selling introduction to software engineering is now updated with three new chapters on state-of-the-art topics. New chapters in the 8th edition Oslash; Security engineering, showing youhow you can design software to resist attacks and recover from damage;Oslash; Service-oriented software engineering, explaininghow reusable web services can be used to develop new applications;Oslash; Aspect-oriented software development, introducing new techniques based on the separation of concerns. Key features Oslash; Includes the latest developments in software engineering theory and practice, integrated with relevant aspects of systems engineering.Oslash; Extensive coverage ofagile methods andreuse.Oslash; Integrated coverage of system safety, security and reliability ndash; illustrating best practice in developing critical systems.Oslash; Two running case studies (an information system and a control system) illuminate different stages of thesoftware lifecycle. Online resources Visit www.pearsoned.co.uk/sommerville to access a full range of resources for students and instructors. In addition, a rich collection of resources including links to other web sites, teaching material on related courses and additional chapters is available at http://www.software-engin.com . IAN SOMMERVILLE is Professor of Software Engineering at the University of St. Andrews in Scotland.",
            "dc:subject":
            [
                "computer",
                "computer programming",
                "computer science",
                "computers",
                "computing",
                "cs",
                "design",
                "enterprise",
                "architecture",
                "IT",
                "non-fiction",
                "programming",
                "requirements",
                "requirements engineering",
                "software",
                "architecture",
                "software engineering",
                "software process",
                "teaching",
                "university",
                "FAQs about software engineering",
                "Professional and ethical responsibility",
                "Socio-technical systems",
                "Emergent system properties",
                "Systems engineering",
                "Organisations, people and computer systems",
                "Legacy systems",
                "Critical systems",
                "Simple safety-critical system",
                "System dependability",
                "Availability and reliability",
                "Safety",
                "Security",
                "Software processes",
                "Software process models",
                "Process activities",
                "The Rational Unified Process",
                "Computer-Aided Software Engineering",
                "Project management",
                "Management activities",
                "Project planning",
                "Project scheduling",
                "Risk management",
                "Software requirements",
                "Functional requirements",
                "Non-functional requirements",
                "User requirements",
                "System requirements",
                "Interface specification",
                "Process iteration",
                "The software requirements document",
                "Requirements engineering processes",
                "Feasibility studies",
                "Requirements elicitation and analysis",
                "Requirements validation",
                "Requirements management",
                "System models",
                "Context models",
                "Behavioural models",
                "Data models",
                "Object models",
                "Structured methods",
                "Critical systems specification",
                "Risk-driven specification",
                "Safety specification",
                "Security specification",
                "Software reliability specification",
                "Formal specification",
                "Formal specification in the software process",
                "Sub-system interface specification",
                "Behavioural specification",
                "Architectural design",
                "Architectural design decisions",
                "System organisation",
                "Modular decomposition styles",
                "Control styles",
                "Reference architectures",
                "Distributed systems architectures",
                "Multiprocessor architectures",
                "Client-server architectures",
                "Distributed object architectures",
                "Inter-organisational distributed computing",
                "Application architectures",
                "Data processing systems",
                "Transaction processing systems",
                "Event processing systems",
                "Language processing systems",
                "Object-oriented design",
                "Objects and object classes",
                "An object-oriented design process",
                "Design evolution",
                "Real-time software design",
                "System design",
                "Real-time operating systems",
                "Monitoring and control systems",
                "Data acquisition systems",
                "User interface design",
                "Design issues",
                "The UI design process",
                "User analysis",
                "User interface prototyping",
                "Interface evaluation",
                "Rapid software development",
                "Agile methods",
                "Extreme programming",
                "Rapid application development",
                "Software prototyping",
                "Software reuse",
                "The reuse landscape",
                "Design patterns",
                "Generator-based reuse",
                "Application frameworks",
                "Application system reuse",
                "Component-based software engineering",
                "Components and component models",
                "The CBSE process",
                "Component composition",
                "Critical systems development",
                "Dependable processes",
                "Dependable programming",
                "Fault tolerance",
                "Fault-tolerant architectures",
                "Software evolution",
                "Program evolution dynamics",
                "Software maintenance",
                "Evolution processes",
                "Legacy system evolution",
                "Verification and validation",
                "Planning verification and validation",
                "Software inspections",
                "Automated static analysis",
                "Verification and formal methods",
                "Software testing",
                "System testing",
                "Component testing",
                "Test case design",
                "Test automation",
                "Critical systems validation",
                "Reliability validation",
                "Safety assurance",
                "Security assessment",
                "Safety and dependability cases",
                "Management",
                "Managing people",
                "Selecting staff",
                "Motivating people",
                "Managing groups",
                "The People Capability Maturity Model",
                "Software cost estimation",
                "Software productivity",
                "Estimation techniques",
                "Algorithmic cost modelling",
                "Project duration and staffing",
                "Quality management",
                "Process and product quality",
                "Quality assurance and standards",
                "Quality planning",
                "Quality control",
                "Software measurement and metrics",
                "Process improvement",
                "Process and product quality",
                "Process classification",
                "Process measurement",
                "Process analysis and modelling",
                "Process change",
                "The CMMI process improvement framework",
                "Configuration management",
                "Configuration management planning",
                "Change management",
                "Version and release management",
                "System building",
                "CASE tools for configuration management",
                "Emerging Technologies",
                "Security engineering",
                "Security concepts",
                "Security risk management",
                "Design for security",
                "System survivability",
                "Service-oriented software engineering",
                "Services as reusable components",
                "Service engineering",
                "Software development with services",
                "Aspect-oriented software development",
                "The separation of concerns",
                "Aspects, join points and pointcuts",
                "Software engineering with aspects"
            ],
        },

        {
            "@id": "0735622671",
            "@type": "schema:CreativeWork",
            "dc:identifier": "0735622671",
            "dc:title": "More about software requirements : thorny issues and practical advice.",
            "dc:creator": "http://id.loc.gov/authorities/names/n86811448",
            "dc:relation": "Best practices (Redmond, Wash.)",
            "dc:language": "en",
            "dc:publisher": "http://libcat.staffs.ac.uk/cgi-bin/koha/opac-search.pl?q=pb:Microsoft Press,",
            "dc:description": "Enhanced descriptions from Syndetics: No matter how much instruction you've had on managing software requirements, there's no substitute for experience. Too often, lessons about requirements engineering processes lack the no-nonsense guidance that supports real-world solutions. Complementing the best practices presented in his book, Software Requirements, Second Edition, requirements engineering authority Karl Wiegers tackles even more of the real issues head-on in this book. With straightforward, professional advice and practical solutions based on actual project experiences, this book answers many of the tough questions raised by industry professionals. From strategies for estimating and working with customers to the nuts and bolts of documenting requirements, this essential companion gives developers, analysts, and managers the cosmic truths that apply to virtually every software development project. Discover how to: * Make the business case for investing in better requirements practices * Generate estimates using three specific techniques * Conduct inquiries to elicit meaningful business and user requirements * Clearly document project scope * Implement use cases, scenarios, and user stories effectively * Improve inspections and peer reviews * Write requirements that avoid ambiguity Includes bibliographical references (p. 189-193) and index.",
            "dc:subject":
            [
                "analysis",
                "best practices",
                "Business Analysis",
                "computer",
                "computer programming",
                "computer science",
                "development",
                "I.T",
                "non-fiction",
                "professional",
                "programming",
                " project management",
                "reference",
                "requirements",
                "requirements engineering",
                "software development",
                "software engineering",
                "software process",
                "software requirements",
                "technology",
                "On essential requirements concepts",
                "Requirements engineering overview",
                "Cosmic truths about software requirements",
                "Management view of requirements",
                "The business value of better requirements",
                "How long do requirements take?",
                "Estimating based on requirements",
                "Interactions. The myth of the on-site customer",
                "An inquiry, not an inquisition",
                "On use cases",
                "Use cases and scenarios and stories",
                "Actors and users",
                "When use cases aren't enough",
                "On writing requirements",
                "Bridging documents",
                "How much detail do you need",
                "To duplicate or not to duplicate",
                "Elements of requirements style",
                "The fuzzy line between requirements and design",
                "On the requirements process",
                "Defining project scope",
                "The line in the sand",
                "The six blind men and the requirements",
                "On managing requirements",
                "Handling requirements for multiple releases",
                "Business requirements and business rules",
                "Measuring requirements",
                "Exploiting requirements management tools"
            ],
        },

        {
            "@id": "032112247X",
            "@type": "schema:CreativeWork",
            "dc:identifier": "032112247X",
            "dc:title": "Managing software requirements : a use case approach",
            "dc:creator": "http://id.loc.gov/authorities/names/n99256459",
            "dc:relation": "Addison-Wesley object technology series.",
            "dc:language": "en",
            "dc:publisher": "http://libcat.staffs.ac.uk/cgi-bin/koha/opac-search.pl?q=pb:Addison-Wesley,",
            "dc:description": "Enhanced descriptions from Syndetics: bull; New content, new theme, new subtitle! The use case approach is a cornerstone technique, and a more prescriptive approach is employed bull; Proven "team skills " exercises help the reader roll the requirements process out to the rest of the team bull; Foreword by Ed Yourdon Previous ed.: 1999. Includes bibliographical references and index.",
            "dc:subject":
            [
                "Arbeit",
                "Business Analysis",
                "computer science",
                "computers",
                "I.T",
                "management",
                "managing",
                "modeling",
                "non-fiction",
                "process",
                "programming",
                "project management",
                "requirements",
                "requirements engineering",
                "software",
                "software development",
                "software engineering",
                "software requirements",
                "usability",
                "use cases",
                "The Requirements Problem",
                "A Look at the Data",
                "Root Causes of Project Success and Failure",
                "The Frequency of Requirements Errors",
                "The High Cost of Requirements Errors",
                "Introduction to Requirements Management",
                "What Is Requirements Management?",
                "Application of Requirements Management Techniques",
                "Systems Applications",
                "The Road Map",
                "The Problem Domain",
                "Stakeholder Needs",
                "Moving Toward the Solution Domain",
                "Features of the System",
                "Software Requirements",
                "An Introduction to Use Cases",
                "The Software Team",
                "Software Development as a Team Activity",
                "Requisite Team Skills for Effective Requirements Management",
                "Team Members Have Different Skills",
                "The Organization of Software Teams",
                "The Case Study"
                "Background for the Case Study",
                "The HOLIS Software Development Team",
                "Team Skill 2 Analyzing the Problem",
                "The Five Steps in Problem Analysis",
                "Gain Agreement on the Problem Definition",
                "The Problem Statement",
                "Understand the Root Causes",
                "The Problem Behind the Problem",
                "Addressing the Root Cause",
                "Identify the Stakeholders and the Users",
                "Define the Solution System Boundary",
                "Identify the Constraints to Be Imposed on the Solution",
                "Business Modeling",
                "Purpose of Business Modeling",
                "Using Software Engineering Techniques for Business Modeling",
                "Choosing the Right Technique",
                "The Unified Modeling Language (UML)",
                "Business Modeling Using UML Concepts",
                "From the Business Models to the Systems Model",
                "When to Use Business Modeling",
                "Systems Engineering of Software-Intensive Systems",
                "What Is Systems Engineering?",
                "Pragmatic Principles of Systems Engineering",
                "The Composition and Decomposition of Complex Systems",
                "Requirements Allocation in Systems Engineering",
                "On Derived Requirements",
                "A Quiet Revolution",
                "When Generations Collide: Graybeard Meets Young Whippersnapper",
                "Avoiding the Stovepipe System Problem",
                "When Subsystems Are Subcontracts",
                "Making It Work Out Right",
                "Preliminary User Needs",
                "Problem Analysis",
                "HOLIS: The System, Actors, and Stakeholders",
                "HOLIS Systems Engineering",
                "The Subsystems of HOLIS",
                "Team Skill 3 Understanding User Needs",
                "The Challenge of Requirements Elicitation",
                "Barriers to Elicitation",
                "The "Undiscovered Ruins" Syndrome",
                "The "User and the Developer" Syndrome",
                "Techniques for Requirements Elicitation",
                "The Features of a Product or System",
                "Stakeholder and User Needs",
                "Features",
                "Managing Complexity by Picking the Level of Abstraction",
                "Attributes of Product Features",
                "Interviewing",
                "The Interview Context ",
                "Value-Added Context",
                "The Moment of Truth: The Interview",
                "Compiling the Need Data",
                "The Analyst's Summary",
                "Requirements Workshops",
                "Preparing for the Workshop",
                "Selling the Concept",
                "Ensuring the Participation of the Right Stakeholders",
                "Logistics",
                "Warm-Up Materials",
                "Role of the Facilitator",
                "Setting the Agenda",
                "Running the Workshop",
                "Brainstorming and Idea Reduction",
                "Production and Follow-Up",
                "Brainstorming and Idea Reduction",
                "Live Brainstorming",
                "Idea Reduction",
                "Pruning",
                "Grouping Ideas",
                "Feature Definition",
                "Prioritization",
                "Web-Based Brainstorming",
                "The Case Study: The HOLIS 2000 Requirements Workshop",
                "Attendees",
                "The Workshop",
                "The Session",
                "Analysis of Results",
                "Storyboarding",
                "Types of Storyboards",
                "What Storyboards Do",
                "Tools and Techniques for Storyboarding",
                "Tips for Storyboarding",
                "Applying Use Cases",
                "Building the Use-Case Model",
                "Applying Use Cases to Requirements Elicitation",
                "The Use Cases for HOLIS",
                "Role Playing",
                "How to Role Play",
                "Techniques Similar to Role Playing",
                "Scripted Walkthroughs",
                "CRC (Class-Responsibility-Collaboration) Cards",
                "Prototyping",
                "Types of Prototypes",
                "Requirements Prototypes",
                "What to Prototype",
                "Building the Prototype",
                "Evaluating the Results",
                "Team Skill 4 Defining the System",
                "Organizing Requirements Information",
                "Organizing Requirements of Complex Hardware and Software Systems",
                "Organizing Requirements for Product Families",
                "On Future Requirements",
                "Business and Marketing Requirements versus Product Requirements",
                "The Case Study",
                "The Vision Document",
                "Components of the Vision Document",
                "The Delta Vision Document",
                "Vision Document for Release 1.0 ",
                "Vision Document for Version 2.0",
                "The Delta Vision Document in a Legacy System Environment",
                "The Champion",
                "The Role of the Product Champion",
                "The Product Champion in a Software Product Environment",
                "The Product Champion in an IS/IT Shop",
                "Team Skill 5 Managing Scope",
                "The Problem of Project Scope",
                "Components of Project Scope",
                "Establishing Project Scope",
                "Setting Priorities ",
                "Assessing Effort",
                "Adding the Risk Element",
                "Reducing Scope",
                "A Reasonable First Estimate",
                "Managing Your Customer",
                "Engaging Customers to Manage Their Project Scope",
                "Communicating the Result",
                "Negotiating with the Customer",
                "Managing the Baseline",
                "Official Change",
                "Unofficial Change",
                "Scope Management and Software Development Process Models",
                "The Waterfall Model",
                "The Spiral Model",
                "The Iterative Approach",
                "Lifecycle Phases",
                "Iterations",
                "Workflows",
                "Team Skill 6 Refining the System Definition",
                "Software Requirements",
                "Definition of Software Requirements",
                "Relationship between Features and Software Requirements",
                "The Requirements Dilemma: What versus How",
                "Exclude Project Information",
                "Exclude Design Information",
                "More on Requirements versus Design",
                "Iterating Requirements and Design",
                "A Further Characterization of Requirements",
                "Functional Software Requirements",
                "Nonfunctional Software Requirements",
                "Design Constraints",
                "Are Design Constraints True Requirements?",
                "Using Parent-Child Requirements to Increase Specificity",
                "Organizing Parent-Child Requirements",
                "Refining the Use Cases",
                "When Are Use Cases Not the Best Choice?",
                "The Redundancy Problem",
                "Refining Use-Case Specifications",
                "How Use Cases Evolve",
                "The Scope of a Use Case",
                "Anatomy of a Simple Use Case",
                "Define the Actor(s)",
                "Define the Use Case by Naming It",
                "Write a Brief Description",
                "Define a Flow of Events",
                "Identify Pre- and Postconditions",
                "Looking Ahead",
                "A Modern Software Requirements Specification",
                "The Modern SRS Package",
                "Who Owns the SRS Package?",
                "Organizing the Modern SRS Package",
                "Documenting Functional Requirements",
                "On Ambiguity and Specificity",
                "Mary Had a Little Lamb",
                "Techniques for Disambiguation",
                "Quality Measures of Software Requirements",
                "Nine Quality Measures",
                "Correct Requirements",
                "Unambiguous Requirements",
                "Completeness of the Requirements Set",
                "Consistency in the Requirements Set",
                "Requirements Ranked for Importance and Stability",
                "Verifiable Requirement",
                "Modifiable Requirements Set",
                "Traceable Requirements",
                "Understandable Requirements",
                "Quality Measures for the Use-Case Model",
                "Use-Case Specifications",
                "Use-Case Actors",
                "Quality Measures of the Modern SRS Package",
                "A Good Table of Contents",
                "A Good Index",
                "A Revision History",
                "Technical Methods for Specifying Requirements",
                "Pseudocode",
                "Finite State Machines",
                "Decision Trees and Decision Tables",
                "Graphical Decision Trees",
                "Activity Diagrams",
                "Entity-Relationship Models",
                "Object-Oriented Modeling",
                "Data Flow Diagrams",
                "Maintenance of Specifications",
                "Team Skill 7 Building the Right System",
                "Building the Right System Right: Overview",
                "Continually Confirm that the Development Is on Track",
                "Principles of Software Verification",
                "The Cost of Verification",
                "Verification at All Levels",
                "The Reason for Verification",
                "Confirm that the Development Results Are Correct",
                "Learn How to Cope with Change that Occurs during the Development Process",
                "From Requirements to Implementation",
                "Mapping Requirements to Design and Code",
                "The Orthogonality Problem",
                "Object Orientation",
                "The Use Case as a Requirement"
            ],
        },

        {
            "foaf:name": "John",
            "foaf:interest":
            [
                {
                    "@id": "0321313798"
                }
            ],
            "@type": "foaf:Person"
        }
    ]
}
